---
description: 
globs: 
alwaysApply: false
---
# PipeLLM Guide

## Purpose

PipeLLM is used to:
1. Generate text or objects with LLMs
2. Process images with Vision LLMs

## Basic Usage

### Simple Text Generation
```toml
[pipe.write_story]
type = "PipeLLM"
description = "Write a short story"
output = "Text"
prompt_template = """
Write a short story about a programmer.
"""
```

### Structured Data Extraction
```toml
[pipe.extract_info]
type = "PipeLLM"
description = "Extract information"
inputs = { text = "Text" }
output = "PersonInfo"
prompt_template = """
Extract person information from this text:
@text
"""
```

### Where to Put Structured Objects
Place your Pydantic models in `pipelex_libraries/pipelines/your_models.py`:

```python
from pipelex.core.stuffs.stuff_content import StructuredContent

class PersonInfo(StructuredContent): # The output models always have to be subclass of StructuredContent
    name: str
    age: int
    email: str
```

## Advanced Features

### LLM Settings

You can specify LLM settings in two ways:

1. **Direct in the pipe**:
```toml
[pipe.analyze]
type = "PipeLLM"
description = "Analyze text"
output = "Analysis"
llm = { llm_handle = "gpt-4", temperature = 0.7 }
prompt_template = "Analyze this text"
```

2. **Using predefined settings** from `pipelex_libraries/llm_deck/base_llm_deck.toml`:
```toml
[pipe.analyze]
type = "PipeLLM"
description = "Analyze text"
output = "Analysis"
llm = "llm_for_analysis"  # References a preset from llm_deck
prompt_template = "Analyze this text"
```

### System Prompts
Add system-level instructions:
```toml
[pipe.expert_analysis]
type = "PipeLLM"
description = "Expert analysis"
output = "Analysis"
system_prompt = "You are a data analysis expert"
prompt_template = "Analyze this data"
```

### Multiple Outputs
Generate multiple results:
```toml
[pipe.generate_ideas]
type = "PipeLLM"
description = "Generate ideas"
output = "Idea"
nb_output = 3  # Generate exactly 3 ideas
# OR
multiple_output = true  # Let the LLM decide how many to generate
```

### Vision Tasks
Process images with VLMs:
```toml
[pipe.analyze_image]
type = "PipeLLM"
description = "Analyze image"
inputs = { image = "Image" } # `image` is the name of the stuff that contains the Image. If its in a stuff, you can add something like `{ "page.image": "Image" }
output = "ImageAnalysis"
prompt_template = "Describe what you see in this image"
```

# Important tip

Always run the cli `pipelex validate` when you are finished writing pipelines: This checks for errors. If there are errors, iterate.