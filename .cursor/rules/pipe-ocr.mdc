---
description: 
globs: 
alwaysApply: false
---
# PipeOCR Guide

## Purpose

Extract text and images from an image or a PDF

## Basic Usage

### Simple Text Generation
```toml
[pipe.extract_info]
type = "PipeOcr"
description = "extract the information"
inputs = { ocr_input = "PDF" } # or { ocr_input = "Image" } if its an image. This is the only input
output = "Page"
```

The output concept `Page` is a native concept, with the structure `PageContent`:
It corresponds to 1 page. Therefore, the PipeOcr is outputing a `ListContent` of `Page`

```python
class TextAndImagesContent(StuffContent):
    text: Optional[TextContent]
    images: Optional[List[ImageContent]]

class PageContent(StructuredContent):
    text_and_images: TextAndImagesContent
    page_view: Optional[ImageContent] = None
```
- `text_and_images` are the text, and the related images found in the input image or PDF.
- `page_view` is the screenshot of the whole pdf page/image.

# Important tip

Always run the cli `pipelex validate` when you are finished writing pipelines: This checks for errors. If there are errors, iterate.