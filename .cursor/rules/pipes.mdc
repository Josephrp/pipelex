---
description: Build a Pipelex pipeline
globs: 
alwaysApply: false
---
# Pipeline Guide

- Always first write your "plan" in natural langage, then transcribe it in pipelex.
- Always run `pipelex validate all -c pipelex/libraries` before finishing a task. It will ensure the pipe is runnable

# Pipeline Structure Guide

## Pipeline File Naming
- Files must be `.toml` for pipelines
- Files must be `.py` for structures
- Use descriptive names in `snake_case`

## Pipeline File Structure
A pipeline file has three main sections:
1. Domain statement
2. Concept definitions
3. Pipe definitions

### Domain Statement
```toml
domain = "domain_name"
definition = "Description of the domain" # Optional
```
Note: The domain name usually matches the toml filename for single-file domains. For multi-file domains, use the subdirectory name.

### Concept Definitions
```toml
[concept]
ConceptName = "Description of the concept" # Should be the same name as the Structure ClassName you want to output
```

Important Rules:
- Use PascalCase for concept names
- Never use plurals (no "Stories", use "Story")
- Avoid adjectives (no "LargeText", use "Text")
- Don't redefine native concepts (Text, Image, PDF, TextAndImages, Number, Page)

### Pipe Definitions

## Pipe Base Structure

```toml
[pipe.your_pipe_name]
type = "PipeLLM"
description = "A description of what your pipe does"
inputs = { input_1 = "ConceptName1", input_2 = "ConceptName2" }
output = "ConceptName"
```

The pipes will all have at least this base structure. 
- `inputs`: Dictionnary of key behing the variable used in the prompts, and the value behing the ConceptName
- `output`: The name of the concept to output. The `ConceptName` should have the same name as the python class if you want structured output. Look on how to do that here: [structures.mdc](structures.mdc)

## Pipe Controllers and Pipe Operator

Look at the Pipes we have in order to adapt it. Pipes are organized in two categories:

1. **Controllers** - For flow control:
   - `PipeSequence` - See [pipe-sequence.mdc](pipe-sequence.mdc): For creating a sequence of multiple steps
   - `PipeCondition` - See [pipe-condition.mdc](pipe-condition.mdc): If the next pipe depends of the expression of a stuff in the working memory
   - `PipeParallel` - See [pipe-parallel.mdc](pipe-parallel.mdc): For parallelizing pipes
   - `PipeBatch` - See [pipe-batch.mdc](pipe-batch.mdc): For running pipes in Batch over a ListContent

2. **Operators** - For specific tasks:
   - `PipeLLM` - See [pipe-llm.mdc](pipe-llm.mdc): Generate Text and Objects (include Vision LLM)
   - `PipeOcr` - See [pipe-ocr.mdc](pipe-ocr.mdc): OCR Pipe
   - `PipeImgGen` - See [pipe-imgg.mdc](pipe-imgg.mdc): Generate Images
   - `PipeFunc` - See [pipe-func.mdc](pipe-func.mdc): For running classic python scripts

When building a pipeline:
1. Always define controllers first, then operators
2. Each pipe must have a clear, single responsibility

# Important tip

Always run the cli `pipelex validate all -c pipelex/libraries` when you are finished writing pipelines: This checks for errors. If there are errors, iterate.